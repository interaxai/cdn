- name: Git Semantic Version
  uses: PaulHatch/semantic-version@v5.0.3
    # The prefix to use to identify tags
    tag_prefix: "v"
    # A string which, if present in a git commit, indicates that a change represents a
    # major (breaking) change, supports regular expressions wrapped with '/'
    major_pattern: "(MAJOR)"
    # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
    major_regexp_flags: ""
    # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
    minor_pattern: "(MINOR)"
    # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
    minor_regexp_flags: ""
    # A string to determine the format of the version output
    version_format: "${major}.${minor}.${patch}-prerelease${increment}"
    # Named version, will be used as suffix for name version tag
    namespace: my-service
    # If this is set to true, *every* commit will be treated as a new version.
    bump_each_commit: true
    # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
    search_commit_body: false
    # The output method used to generate list of users, 'csv' or 'json'.
    user_format_type: "csv"
    # Prevents pre-v1.0.0 version from automatically incrementing the major version.
    # If enabled, when the major version is 0, major releases will be treated as minor and minor as patch. Note that the version_type output is unchanged.
    enable_prerelease_mode: true
